{
  "version": 3,
  "sources": ["../../undo-redo-ts/UndoManager.ts"],
  "sourcesContent": ["export interface ICommand {\n  name?: string;\n  undo: () => any;\n  redo: () => any;\n}\n\nexport class UndoManager {\n  private commands: ICommand[] = [];\n  private index = -1;\n  private limit: number;\n\n  public constructor(limit = 0) {\n    this.limit = limit;\n  }\n\n  public add(command: ICommand): UndoManager {\n    this.commands = this.commands.slice(0, this.index+1);\n    this.commands.push(command);\n    if (this.limit > 0 && this.commands.length > this.limit) {\n      this.commands.shift();\n    } else {\n      this.index++;\n    }\n    return this;\n  }\n\n  public redo(): boolean {\n    if (this.index < this.commands.length -1) {\n      this.index++;\n      this.commands[this.index].redo();\n      return true;\n    }\n    return false;\n  }\n\n  public undo(): boolean {\n    if (this.index >= 0) {\n      this.commands[this.index].undo();\n      this.index--;\n      return true;\n    }\n    return false;\n  }\n\n  public commandStack(): ICommand[] {\n    return this.commands.slice(0);\n  }\n}"],
  "mappings": ";;;;;AAMO,IAAM,cAAN,MAAkB;AAAA,EAKhB,YAAY,QAAQ,GAAG;AAJ9B,wBAAQ,YAAuB,CAAC;AAChC,wBAAQ,SAAQ;AAChB,wBAAQ;AAGN,SAAK,QAAQ;AAAA,EACf;AAAA,EAEO,IAAI,SAAgC;AACzC,SAAK,WAAW,KAAK,SAAS,MAAM,GAAG,KAAK,QAAM,CAAC;AACnD,SAAK,SAAS,KAAK,OAAO;AAC1B,QAAI,KAAK,QAAQ,KAAK,KAAK,SAAS,SAAS,KAAK,OAAO;AACvD,WAAK,SAAS,MAAM;AAAA,IACtB,OAAO;AACL,WAAK;AAAA,IACP;AACA,WAAO;AAAA,EACT;AAAA,EAEO,OAAgB;AACrB,QAAI,KAAK,QAAQ,KAAK,SAAS,SAAQ,GAAG;AACxC,WAAK;AACL,WAAK,SAAS,KAAK,KAAK,EAAE,KAAK;AAC/B,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EAEO,OAAgB;AACrB,QAAI,KAAK,SAAS,GAAG;AACnB,WAAK,SAAS,KAAK,KAAK,EAAE,KAAK;AAC/B,WAAK;AACL,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EAEO,eAA2B;AAChC,WAAO,KAAK,SAAS,MAAM,CAAC;AAAA,EAC9B;AACF;",
  "names": []
}
